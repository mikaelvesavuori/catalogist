service: catalogist

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region:  ${opt:region, 'eu-north-1'}
  memorySize: ${opt:memory, 512}
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: false
  deploymentBucket:
    blockPublicAccess: true
    maxPreviousDeploymentArtifacts: 5
    serverSideEncryption: AES256
  stackTags:
    Usage: ${self:service}
  tags:
    Usage: ${self:service}
  apiGateway:
    minimumCompressionSize: 1024
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource:
          - "*"

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-iam-roles-per-function

package:
  individually: true

custom:
  aws:
    accountNumber: 123412341234
    tableName: catalogist
    databaseArn: arn:aws:dynamodb:${self:provider.region}:${self:custom.aws.accountNumber}:table/${self:custom.aws.tableName}

functions:
  Authorizer:
    handler: src/infrastructure/adapters/web/Authorizer.handler
    description: ${self:service} authorizer
  CreateRecords:
    handler: src/infrastructure/adapters/web/CreateRecords.handler
    description: Create record
    events:
      - http:
          method: POST
          path: /record
          request:
            schema:
              application/json: ${file(api/create.validator.json)}
          authorizer:
            name: Authorizer
            resultTtlInSeconds: 30 # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695
            identitySource: method.request.header.Authorization
            type: request
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
        Resource: ${self:custom.aws.databaseArn}
    environment:
      TABLE_NAME: ${self:custom.aws.tableName}
  GetRecords:
    handler: src/infrastructure/adapters/web/GetRecords.handler
    description: Get records
    events:
      - http:
          method: GET
          path: /records
          request:
            parameters:
              # These are the acceptable query string parameters; "false" means they are not required
              querystrings:
                lifecycleStage: false
                serviceName: false
          authorizer:
            name: Authorizer
            resultTtlInSeconds: 30 # See: https://forum.serverless.com/t/api-gateway-custom-authorizer-caching-problems/4695
            identitySource: method.request.header.Authorization
            type: request
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
        Resource: ${self:custom.aws.databaseArn}
    environment:
      TABLE_NAME: ${self:custom.aws.tableName}

resources:
  Resources:
    # DynamoDB configuration
    CatalogistTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: catalogist
        AttributeDefinitions:
          - AttributeName: lifecycleStage
            AttributeType: S
          - AttributeName: serviceName
            AttributeType: S
        KeySchema:
          - AttributeName: lifecycleStage
            KeyType: HASH
          - AttributeName: serviceName
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    # API Gateway configuration
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    AuthFailureExpiredGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureUnauthorizedGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'